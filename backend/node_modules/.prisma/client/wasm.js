
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  nip: 'nip',
  nama: 'nama',
  email: 'email',
  password: 'password',
  role: 'role',
  jenisKelamin: 'jenisKelamin',
  tanggalLahir: 'tanggalLahir',
  alamat: 'alamat',
  mobilePhone: 'mobilePhone',
  pendidikanTerakhir: 'pendidikanTerakhir',
  jabatan: 'jabatan',
  golongan: 'golongan',
  status: 'status',
  instansi: 'instansi',
  kantor: 'kantor',
  username: 'username',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PeriodScalarFieldEnum = {
  id: 'id',
  tahun: 'tahun',
  bulan: 'bulan',
  namaPeriode: 'namaPeriode',
  noPeriode: 'noPeriode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EvaluationParameterScalarFieldEnum = {
  id: 'id',
  namaParameter: 'namaParameter',
  deskripsi: 'deskripsi',
  kategori: 'kategori',
  urutan: 'urutan',
  createdAt: 'createdAt'
};

exports.Prisma.EvaluationScalarFieldEnum = {
  id: 'id',
  evaluatorId: 'evaluatorId',
  periodId: 'periodId',
  targetUserId: 'targetUserId',
  ranking: 'ranking',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EvaluationScoreScalarFieldEnum = {
  id: 'id',
  evaluationId: 'evaluationId',
  parameterId: 'parameterId',
  score: 'score',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  periodId: 'periodId',
  persentaseTotal: 'persentaseTotal',
  tidakKerja: 'tidakKerja',
  pulangAwal: 'pulangAwal',
  telat: 'telat',
  absenApel: 'absenApel',
  cuti: 'cuti',
  totalMinus: 'totalMinus',
  nilaiPresensi: 'nilaiPresensi',
  keterangan: 'keterangan',
  inputBy: 'inputBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CkpScoreScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  periodId: 'periodId',
  score: 'score',
  keterangan: 'keterangan',
  inputBy: 'inputBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinalEvaluationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  periodId: 'periodId',
  berakhlakScore: 'berakhlakScore',
  presensiScore: 'presensiScore',
  ckpScore: 'ckpScore',
  finalScore: 'finalScore',
  totalEvaluators: 'totalEvaluators',
  ranking: 'ranking',
  isBestEmployee: 'isBestEmployee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AspekPenilaianScalarFieldEnum = {
  id: 'id',
  namaAspek: 'namaAspek',
  deskripsi: 'deskripsi',
  kategori: 'kategori',
  bobot: 'bobot',
  createdAt: 'createdAt'
};

exports.Prisma.RentangNilaiScalarFieldEnum = {
  id: 'id',
  kategori: 'kategori',
  nilaiMin: 'nilaiMin',
  nilaiMax: 'nilaiMax',
  deskripsi: 'deskripsi',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  STAFF: 'STAFF',
  ADMIN: 'ADMIN',
  PIMPINAN: 'PIMPINAN'
};

exports.Gender = exports.$Enums.Gender = {
  LK: 'LK',
  PR: 'PR'
};

exports.EvaluationStatus = exports.$Enums.EvaluationStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Period: 'Period',
  EvaluationParameter: 'EvaluationParameter',
  Evaluation: 'Evaluation',
  EvaluationScore: 'EvaluationScore',
  Attendance: 'Attendance',
  CkpScore: 'CkpScore',
  FinalEvaluation: 'FinalEvaluation',
  AspekPenilaian: 'AspekPenilaian',
  RentangNilai: 'RentangNilai'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
